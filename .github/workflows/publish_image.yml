# This workflow is based on example from #  https://github.com/marketplace/actions/build-and-push-docker-images

name: Publish Image to Volttron DockerHub

on:
  push:
    tags:
      - v*
jobs:
  build:
    env:
      # variables to change image name on DockerHub; here, the image name will take form volttron/<GROUP>:<TAG>
      IMAGE_BASE_NAME: eclipsevolttron/volttron

    # The strategy allows customization of the build and allows matrixing the version of os and software
    # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.9 ]

    runs-on: ${{ matrix.os }}

    steps:
        - name: Check out the repo
          uses: actions/checkout@v2

        - name: Clone submodule
          run: git submodule update --init --recursive

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v3
          with:
            images: ${{ env.IMAGE_BASE_NAME }}

        # Ensure that the repo has the username and token added from the
        # official Volttron Dockerhub page at https://hub.docker.com/repository/docker/eclipsevolttron/volttron/general
        # On instructions how to do this, see https://docs.github.com/en/actions/guides/publishing-docker-images
        - name: Login to DockerHub
          if: github.event_name != 'pull_request'
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: .
            push: ${{ github.event_name != 'pull_request' }}
            tags: ${{ steps.meta.outputs.tags }}

        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}
